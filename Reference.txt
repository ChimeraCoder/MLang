1 Introduction
This manual serves to provide an in-depth description of the Turing Complete programming language MLang. It assumes a considerable familiarity in the syntax of MLang. For a tutorial introduction to MLang, see the MLang Tutorial(make to italics).

1.1 MLang History
MLang was developed in 2012 at Columbia University, New York. The motive behind the project was to create a Turing Complete programming language that could be used to create music in a grammatically accurate manner. 

MLang may or may not be a Lisp, as there is no unifying specification that defines a Lisp dialect, as compared to a language that is merely Lisp-like. MLang shares many common properties with the two most popular Lisp implementations: Common Lisp and Scheme. Like both languages, MLang is a functional language. Like both languages, MLang supports higher-order functions. Like both languages, MLang uses S-expressions for its syntax. Like Scheme, MLang uses the same namespace for variables and functions (such languages are known as Lisp-1 dialects, as opposed to Lisp-2 dialects). Like Common Lisp and Scheme, MLang is homoiconic. Unlike other Lisp dialects, however, the homoiconicity uses the concept of a \emph{note} (as in musical note) as the internal equivalence point for functions. MLang's interpreter is written in Ocaml.

1.2 Conventions
This details how the code is constructed in MLang.

1.2.1 Terms
Throughout the manual, references to "MLang Reader" and "MLang Printer" refer to the processes that convert the text in the program to MLang objects for evaluation and vice versa. Any use of the term "you", refer to the programmer or the person reading the manual as appropriate. 

MLang functions are written as -

{format}
open-paren name-of-play duration close-paren

Eg:

(rondo rondo-components) calls the function 'rondo' that plays, as a rondo, the individual components specified by rondo-components (the sole parameter).

1.3 Acknowledgements

2 MLang Data Types
In MLang the primitive data type is the MNote, which is treated entirely equivalently to a function. In fact, an MNote is simply a function that takes in zero parameters and has a single fixed output. (Because MLang is homoiconic, notes may also be used where functions are expected, and this is perfectly valid syntax; this practice has semantic meaning when metaprogramming in MLang, which is discussed later).

A single note in MLang can be written as -

%name-of-note {format}

Here '%' is a note identifier rather than a shell prompt. An example of a note can thus be given as-

%A {format}

This represents the musical note 'A' with a play time of 50ms. 

2.1 Printed Representation
The printed representation is the format of the output generated by the MLang execution. Every data type has a unique printed representation. The read syntax of an object is the format accepted by the MLang program for that object. When you evaluate an expression interactively, the MLang reader reads the text, produces and object and evaluates that object.

2.2 Comments
A comment is a text that is written purely to establish clarity in the program when read by the programmer or others. The text enclosed by the comments are not evaluated by the MLang interpreter. In MLang, the comments are marked by a semicolon, ';'. 
When a text starts with the comment symbol, the entire string is not read. 
Eg:

;this is a comment
(play (treble 5)) 

(Comments can be written only at the start or end of the program - do we make this restriction? Also we're using only ';' for all types of comments)

For commenting out functions, the ';' symbol must be used at the beginning of every like of the function.
Eg:

 ; this function has been commented
 ; (play (canon 500) 
 ;  	 	(rondo 100))

3 MLang Functions
In MLang, functions are defined by a set of enclosing parenthesis.The function is can be considered to be defined like a lambda, which is eventually evaluated to a series of notes. During evaluation, a function is treated just like a note (or a series of notes) but with arguments.

4 Modules
These are defined by the MLang standard library and will be available for use.

4.1 Phrase
A phrase consists of an arbitrary number of notes/functions with a total duration specified. The duration is not known at compile-time.

An example of a phrase can be given by -


4.2 Trill
A trill is a musical feature that involves playing two notes in quick succession to each other. 

An example of a trill can be seen below -

5 Lists
Similar to Lisp, MLang processes all the objects as lists. The primitive data type MNote can be considered as a list of size 1. Functions are a series of MNotes. If the cdr of a list contains a value, then the list is evaluated as a function, and if the cdr is empty, then the list is considered to be a single note. 

6 Evaluation of an MLang Expression

When a function written in MLang is called, the value of the function is computed by evaluating the expressions written in the function body. Evaluation of an expression written in MLang is done in a recursive manner i.e. it involves evaluating expressions within an expression, starting right from a single argument.  

“##We can talk about environment here. I was not sure how it happens”

We can have Self-evaluating functions that evaluate to the object being evaluated, and Symbol forms that refer to a symbol table to return a variable’s value. Function and Module forms are evaluated by computing the value of the expressions/ nested expressions in the function.

7 Compiling and Running an Mlang Program

An Mlang program is technically a series of function calls. When you compile this program, an OCaml complier simply converts these functions into a representation that can be executed more efficiently. This file is then evaluated by an OCaml interpreter to a form that can be used to generate MIDI files. (Yes! You can listen to the music you just wrote!)

MLang is portable in the sense that it does not depend upon the machine’s hardware for its execution.




