Lesson learned (individual)
===========================

The most important lesson I learned is the fact that your "perfect" design will not work in real life as it probably depends on "imperfect"
components that you treat as black boxes. It is not possible to have a complete design right at the beginning because it is not humanly possible to be correct about every assumption you make. Your design needs to account for all the bugs, imperfections and limitations of the system it is built on
top of. Thus it is extremely important to be flexible and willing to explore other directions when something does not work.

Another lesson learned is that communication is important. However, I believe that communication via email is more productive than face to face meetings, since when communicating over email, one is forced to think very carefully about what is being written and what is being said. When meeting face to face, there is a human tendency to avoid portraying yourself as the only guy who did not get what was being said. This is not the case when
communicating online. There is also the added advantage of having access to references as and when you type out your reply.

A solid knowledge of the infrastructure being used to develop the project is also required as well. It is important
to start early and to commit code often. There is a dichotomy in this observation however as many open source projects will not accept broken code.
However for smaller sized projects it is essential to commit code (broken or not) early. This way we can get feedback immediately.
However when we are in a tight situation it is also important not to break the build.

